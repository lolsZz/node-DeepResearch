This file is a merged representation of the entire codebase, combined into a single document by Repomix. The content has been processed where empty lines have been removed.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.changeset/
  config.json
  README.md
src/
  index.ts
.gitignore
.prettierignore
.prettierrc
CHANGELOG.md
LICENSE
package.json
README.md
renovate.json
tsconfig.json

================================================================
Files
================================================================

================
File: .changeset/config.json
================
{
  "$schema": "https://unpkg.com/@changesets/config@3.0.5/schema.json",
  "changelog": "@changesets/cli/changelog",
  "commit": false,
  "fixed": [],
  "linked": [],
  "access": "public",
  "baseBranch": "main",
  "updateInternalDependencies": "patch",
  "ignore": []
}

================
File: .changeset/README.md
================
# Changesets

Hello and welcome! This folder has been automatically generated by `@changesets/cli`, a build tool that works
with multi-package repos, or single-package repos to help you version and publish your code. You can
find the full documentation for it [in our repository](https://github.com/changesets/changesets)

We have a quick list of common questions to get you started engaging with this project in
[our documentation](https://github.com/changesets/changesets/blob/main/docs/common-questions.md)

================
File: src/index.ts
================
#!/usr/bin/env node
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
	CallToolRequestSchema,
	ErrorCode,
	ListToolsRequestSchema,
	McpError,
} from '@modelcontextprotocol/sdk/types.js';
import { readFileSync } from 'fs';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const pkg = JSON.parse(
	readFileSync(join(__dirname, '..', 'package.json'), 'utf8'),
);
const { name, version } = pkg;
const JINAAI_API_KEY = process.env.JINAAI_API_KEY;
if (!JINAAI_API_KEY) {
	throw new Error('JINAAI_API_KEY environment variable is required');
}
const is_valid_url = (url: string): boolean => {
	try {
		new URL(url);
		return true;
	} catch {
		return false;
	}
};
class JinaReaderServer {
	private server: Server;
	private base_url = 'https://r.jina.ai/';
	constructor() {
		this.server = new Server(
			{
				name,
				version,
			},
			{
				capabilities: {
					tools: {},
				},
			},
		);
		this.setup_handlers();
		this.server.onerror = (error) =>
			console.error('[MCP Error]', error);
	}
	private setup_handlers() {
		this.server.setRequestHandler(
			ListToolsRequestSchema,
			async () => ({
				tools: [
					{
						name: 'read_url',
						description:
							'Convert any URL to LLM-friendly text using Jina.ai Reader',
						inputSchema: {
							type: 'object',
							properties: {
								url: {
									type: 'string',
									description: 'URL to process',
								},
								no_cache: {
									type: 'boolean',
									description: 'Bypass cache for fresh results',
									default: false,
								},
								format: {
									type: 'string',
									description: 'Response format (json or stream)',
									enum: ['json', 'stream'],
									default: 'json',
								},
								timeout: {
									type: 'number',
									description:
										'Maximum time in seconds to wait for webpage load',
								},
								target_selector: {
									type: 'string',
									description:
										'CSS selector to focus on specific elements',
								},
								wait_for_selector: {
									type: 'string',
									description:
										'CSS selector to wait for specific elements',
								},
								remove_selector: {
									type: 'string',
									description:
										'CSS selector to exclude specific elements',
								},
								with_links_summary: {
									type: 'boolean',
									description:
										'Gather all links at the end of response',
								},
								with_images_summary: {
									type: 'boolean',
									description:
										'Gather all images at the end of response',
								},
								with_generated_alt: {
									type: 'boolean',
									description:
										'Add alt text to images lacking captions',
								},
								with_iframe: {
									type: 'boolean',
									description: 'Include iframe content in response',
								},
							},
							required: ['url'],
						},
					},
				],
			}),
		);
		this.server.setRequestHandler(
			CallToolRequestSchema,
			async (request) => {
				if (request.params.name !== 'read_url') {
					throw new McpError(
						ErrorCode.MethodNotFound,
						`Unknown tool: ${request.params.name}`,
					);
				}
				const args = request.params.arguments as Record<
					string,
					unknown
				>;
				if (
					!args ||
					typeof args.url !== 'string' ||
					!is_valid_url(args.url)
				) {
					throw new McpError(
						ErrorCode.InvalidParams,
						'Invalid or missing URL parameter',
					);
				}
				try {
					const headers: Record<string, string> = {
						Accept:
							typeof args.format === 'string' &&
							args.format === 'stream'
								? 'text/event-stream'
								: 'application/json',
						'Content-Type': 'application/json',
						Authorization: `Bearer ${JINAAI_API_KEY}`,
					};
					// Optional headers from documentation
					if (typeof args.no_cache === 'boolean' && args.no_cache) {
						headers['X-No-Cache'] = 'true';
					}
					if (typeof args.timeout === 'number') {
						headers['X-Timeout'] = args.timeout.toString();
					}
					if (typeof args.target_selector === 'string') {
						headers['X-Target-Selector'] = args.target_selector;
					}
					if (typeof args.wait_for_selector === 'string') {
						headers['X-Wait-For-Selector'] = args.wait_for_selector;
					}
					if (typeof args.remove_selector === 'string') {
						headers['X-Remove-Selector'] = args.remove_selector;
					}
					if (
						typeof args.with_links_summary === 'boolean' &&
						args.with_links_summary
					) {
						headers['X-With-Links-Summary'] = 'true';
					}
					if (
						typeof args.with_images_summary === 'boolean' &&
						args.with_images_summary
					) {
						headers['X-With-Images-Summary'] = 'true';
					}
					if (
						typeof args.with_generated_alt === 'boolean' &&
						args.with_generated_alt
					) {
						headers['X-With-Generated-Alt'] = 'true';
					}
					if (
						typeof args.with_iframe === 'boolean' &&
						args.with_iframe
					) {
						headers['X-With-Iframe'] = 'true';
					}
					const response = await fetch(this.base_url + args.url, {
						headers,
					});
					if (!response.ok) {
						throw new Error(`HTTP error! status: ${response.status}`);
					}
					const result = await response.text();
					return {
						content: [
							{
								type: 'text',
								text: result,
							},
						],
					};
				} catch (error) {
					const message =
						error instanceof Error ? error.message : String(error);
					throw new McpError(
						ErrorCode.InternalError,
						`Failed to process URL: ${message}`,
					);
				}
			},
		);
	}
	async run() {
		const transport = new StdioServerTransport();
		await this.server.connect(transport);
		console.error('Jina Reader MCP server running on stdio');
	}
}
const server = new JinaReaderServer();
server.run().catch(console.error);

================
File: .gitignore
================
# Dependencies
node_modules/
.pnpm-store/

# Build output
dist/
build/

# Environment variables
.env
.env.local
.env.*.local

# IDE
.vscode/
.idea/
*.swp
*.swo

# Logs
*.log
npm-debug.log*
pnpm-debug.log*

# Testing
coverage/

# Database files
*.db
*.db-journal

# OS
.DS_Store
Thumbs.db

================
File: .prettierignore
================
# Package Managers
package-lock.json
pnpm-lock.yaml
yarn.lock

================
File: .prettierrc
================
{
	"useTabs": true,
	"singleQuote": true,
	"trailingComma": "all",
	"printWidth": 70,
	"proseWrap": "always"
}

================
File: CHANGELOG.md
================
# mcp-jinaai-reader

## 0.0.4

### Patch Changes

- fix: update README.md for mcp-jinaai-reader configuration

## 0.0.3

### Patch Changes

- add glama banner

## 0.0.2

### Patch Changes

- update for publish to npm

================
File: LICENSE
================
MIT License

Copyright (c) 2025 Scott Spence

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

================
File: package.json
================
{
	"name": "mcp-jinaai-reader",
	"version": "0.0.4",
	"description": "MCP server for JinaAI reader",
	"type": "module",
	"main": "dist/index.js",
	"types": "dist/index.d.ts",
	"bin": {
		"mcp-jinaai-reader": "./dist/index.js"
	},
	"files": [
		"dist",
		"README.md",
		"LICENSE"
	],
	"scripts": {
		"build": "tsc && chmod +x dist/index.js",
		"start": "node dist/index.js",
		"dev": "npx @modelcontextprotocol/inspector dist/index.js",
		"changeset": "changeset",
		"version": "changeset version",
		"release": "pnpm run build && changeset publish"
	},
	"keywords": [
		"mcp",
		"model-context-protocol",
		"jinaai",
		"reader",
		"web-content",
		"documentation",
		"content-extraction",
		"text-extraction",
		"llm",
		"ai",
		"web-scraping",
		"content-parser"
	],
	"author": "Scott Spence",
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/spences10/mcp-jinaai-reader.git"
	},
	"bugs": {
		"url": "https://github.com/spences10/mcp-jinaai-reader/issues"
	},
	"homepage": "https://github.com/spences10/mcp-jinaai-reader#readme",
	"dependencies": {
		"@modelcontextprotocol/sdk": "1.4.1"
	},
	"devDependencies": {
		"@changesets/cli": "^2.27.12",
		"@types/node": "^22.13.0",
		"typescript": "^5.7.3"
	}
}

================
File: README.md
================
# mcp-jinaai-reader

A Model Context Protocol (MCP) server for integrating Jina.ai's Reader
API with LLMs. This server provides efficient and comprehensive web
content extraction capabilities, optimized for documentation and web
content analysis.

<a href="https://glama.ai/mcp/servers/a75afsx9cx">
  <img width="380" height="200" src="https://glama.ai/mcp/servers/a75afsx9cx/badge" />
</a>

## Features

- 📚 Advanced web content extraction through Jina.ai Reader API
- 🚀 Fast and efficient content retrieval
- 📄 Complete text extraction with preserved structure
- 🔄 Clean format optimized for LLMs
- 🌐 Support for various content types including documentation
- 🏗️ Built on the Model Context Protocol

## Configuration

This server requires configuration through your MCP client. Here are
examples for different environments:

### Cline Configuration

Add this to your Cline MCP settings:

```json
{
	"mcpServers": {
		"jinaai-reader": {
			"command": "node",
			"args": ["-y", "mcp-jinaai-reader"],
			"env": {
				"JINAAI_API_KEY": "your-jinaai-api-key"
			}
		}
	}
}
```

### Claude Desktop with WSL Configuration

For WSL environments, add this to your Claude Desktop configuration:

```json
{
	"mcpServers": {
		"jinaai-reader": {
			"command": "wsl.exe",
			"args": [
				"bash",
				"-c",
				"JINAAI_API_KEY=your-jinaai-api-key npx mcp-jinaai-reader"
			]
		}
	}
}
```

### Environment Variables

The server requires the following environment variable:

- `JINAAI_API_KEY`: Your Jina.ai API key (required)

## API

The server implements a single MCP tool with configurable parameters:

### read_url

Convert any URL to LLM-friendly text using Jina.ai Reader.

Parameters:

- `url` (string, required): URL to process
- `no_cache` (boolean, optional): Bypass cache for fresh results.
  Defaults to false
- `format` (string, optional): Response format ("json" or "stream").
  Defaults to "json"
- `timeout` (number, optional): Maximum time in seconds to wait for
  webpage load
- `target_selector` (string, optional): CSS selector to focus on
  specific elements
- `wait_for_selector` (string, optional): CSS selector to wait for
  specific elements
- `remove_selector` (string, optional): CSS selector to exclude
  specific elements
- `with_links_summary` (boolean, optional): Gather all links at the
  end of response
- `with_images_summary` (boolean, optional): Gather all images at the
  end of response
- `with_generated_alt` (boolean, optional): Add alt text to images
  lacking captions
- `with_iframe` (boolean, optional): Include iframe content in
  response

## Development

### Setup

1. Clone the repository
2. Install dependencies:

```bash
npm install
```

3. Build the project:

```bash
npm run build
```

4. Run in development mode:

```bash
npm run dev
```

### Publishing

1. Update version in package.json
2. Build the project:

```bash
npm run build
```

3. Publish to npm:

```bash
npm publish
```

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- Built on the
  [Model Context Protocol](https://github.com/modelcontextprotocol)
- Powered by [Jina.ai Reader API](https://jina.ai)

================
File: renovate.json
================
{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:recommended"
  ]
}

================
File: tsconfig.json
================
{
	"compilerOptions": {
		"target": "ES2020",
		"module": "ES2020",
		"moduleResolution": "node",
		"esModuleInterop": true,
		"strict": true,
		"outDir": "dist",
		"rootDir": "src",
		"skipLibCheck": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true
	},
	"include": ["src/**/*"],
	"exclude": ["node_modules", "dist"]
}



================================================================
End of Codebase
================================================================
