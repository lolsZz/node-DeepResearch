This file is a merged representation of the entire codebase, combined into a single document by Repomix. The content has been processed where empty lines have been removed.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.changeset/
  config.json
  README.md
src/
  index.ts
.gitignore
.prettierignore
.prettierrc
CHANGELOG.md
LICENSE
package.json
README.md
renovate.json
tsconfig.json

================================================================
Files
================================================================

================
File: .changeset/config.json
================
{
  "$schema": "https://unpkg.com/@changesets/config@3.0.5/schema.json",
  "changelog": "@changesets/cli/changelog",
  "commit": false,
  "fixed": [],
  "linked": [],
  "access": "public",
  "baseBranch": "main",
  "updateInternalDependencies": "patch",
  "ignore": []
}

================
File: .changeset/README.md
================
# Changesets

Hello and welcome! This folder has been automatically generated by `@changesets/cli`, a build tool that works
with multi-package repos, or single-package repos to help you version and publish your code. You can
find the full documentation for it [in our repository](https://github.com/changesets/changesets)

We have a quick list of common questions to get you started engaging with this project in
[our documentation](https://github.com/changesets/changesets/blob/main/docs/common-questions.md)

================
File: src/index.ts
================
#!/usr/bin/env node
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
	CallToolRequestSchema,
	ErrorCode,
	ListToolsRequestSchema,
	McpError,
} from '@modelcontextprotocol/sdk/types.js';
import { readFileSync } from 'fs';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const pkg = JSON.parse(
	readFileSync(join(__dirname, '..', 'package.json'), 'utf8'),
);
const { name, version } = pkg;
const API_KEY = process.env.JINAAI_API_KEY;
if (!API_KEY) {
	throw new Error('JINAAI_API_KEY environment variable is required');
}
const search_tool_schema = {
	name: 'search',
	description:
		'Search the web and get clean, LLM-friendly content using Jina.ai Reader. Returns top 5 results with URLs and clean content.',
	inputSchema: {
		type: 'object',
		properties: {
			query: {
				type: 'string',
				description: 'Search query',
			},
			format: {
				type: 'string',
				description: 'Response format (json or text)',
				enum: ['json', 'text'],
				default: 'text',
			},
			no_cache: {
				type: 'boolean',
				description: 'Bypass cache for fresh results',
				default: false,
			},
			token_budget: {
				type: 'number',
				description: 'Maximum number of tokens for this request',
				minimum: 1,
			},
			browser_locale: {
				type: 'string',
				description: 'Browser locale for rendering content',
			},
			stream: {
				type: 'boolean',
				description: 'Enable stream mode for large pages',
				default: false,
			},
			gather_links: {
				type: 'boolean',
				description: 'Gather all links at the end of the response',
				default: false,
			},
			gather_images: {
				type: 'boolean',
				description: 'Gather all images at the end of the response',
				default: false,
			},
			image_caption: {
				type: 'boolean',
				description: 'Caption images in the content',
				default: false,
			},
			enable_iframe: {
				type: 'boolean',
				description: 'Extract content from iframes',
				default: false,
			},
			enable_shadow_dom: {
				type: 'boolean',
				description: 'Extract content from shadow DOM',
				default: false,
			},
			resolve_redirects: {
				type: 'boolean',
				description: 'Follow redirect chains to final URL',
				default: true,
			},
		},
		required: ['query'],
	},
};
class JinaSearchServer {
	private server: Server;
	constructor() {
		this.server = new Server(
			{
				name,
				version,
			},
			{
				capabilities: {
					tools: {},
				},
			},
		);
		this.setup_handlers();
		this.server.onerror = (error) =>
			console.error('[MCP Error]', error);
	}
	private setup_handlers() {
		this.server.setRequestHandler(
			ListToolsRequestSchema,
			async () => ({
				tools: [search_tool_schema],
			}),
		);
		this.server.setRequestHandler(
			CallToolRequestSchema,
			async (request) => {
				if (request.params.name !== 'search') {
					throw new McpError(
						ErrorCode.MethodNotFound,
						`Unknown tool: ${request.params.name}`,
					);
				}
				const arguments_record = request.params.arguments as {
					query: string;
					format?: 'json' | 'text';
					no_cache?: boolean;
					token_budget?: number;
					browser_locale?: string;
					stream?: boolean;
					gather_links?: boolean;
					gather_images?: boolean;
					image_caption?: boolean;
					enable_iframe?: boolean;
					enable_shadow_dom?: boolean;
					resolve_redirects?: boolean;
				};
				const {
					query,
					format = 'text',
					no_cache = false,
					token_budget,
					browser_locale,
					stream = false,
					gather_links = false,
					gather_images = false,
					image_caption = false,
					enable_iframe = false,
					enable_shadow_dom = false,
					resolve_redirects = true,
				} = arguments_record;
				const search_url = `https://s.jina.ai/${encodeURIComponent(
					query,
				)}`;
				const headers: Record<string, string> = {
					Authorization: `Bearer ${API_KEY}`,
					Accept:
						format === 'json' ? 'application/json' : 'text/plain',
				};
				if (no_cache) {
					headers['X-Bypass-Cache'] = 'true';
				}
				if (token_budget) {
					headers['X-Token-Budget'] = token_budget.toString();
				}
				if (browser_locale) {
					headers['X-Browser-Locale'] = browser_locale;
				}
				if (stream) {
					headers['X-Stream-Mode'] = 'true';
				}
				if (gather_links) {
					headers['X-Gather-Links'] = 'true';
				}
				if (gather_images) {
					headers['X-Gather-Images'] = 'true';
				}
				if (image_caption) {
					headers['X-Image-Caption'] = 'true';
				}
				if (enable_iframe) {
					headers['X-Enable-Iframe'] = 'true';
				}
				if (enable_shadow_dom) {
					headers['X-Enable-Shadow-DOM'] = 'true';
				}
				if (!resolve_redirects) {
					headers['X-No-Redirect'] = 'true';
				}
				try {
					const response = await fetch(search_url, {
						method: 'POST',
						headers,
					});
					if (!response.ok) {
						const error_text = await response.text();
						throw new Error(error_text);
					}
					const result =
						format === 'json'
							? await response.json()
							: await response.text();
					return {
						content: [
							{
								type: 'text',
								text:
									format === 'json'
										? JSON.stringify(result, null, 2)
										: result,
							},
						],
					};
				} catch (error) {
					return {
						content: [
							{
								type: 'text',
								text: `Jina.ai API error: ${
									error instanceof Error
										? error.message
										: String(error)
								}`,
							},
						],
						isError: true,
					};
				}
			},
		);
	}
	async run() {
		const transport = new StdioServerTransport();
		await this.server.connect(transport);
		console.error('Jina Search MCP server running on stdio');
	}
}
const server = new JinaSearchServer();
server.run().catch((error) => {
	console.error('Failed to start server:', error);
	process.exit(1);
});

================
File: .gitignore
================
# Dependencies
node_modules/
.pnpm-store/

# Build output
dist/
build/

# Environment variables
.env
.env.local
.env.*.local

# IDE
.vscode/
.idea/
*.swp
*.swo

# Logs
*.log
npm-debug.log*
pnpm-debug.log*

# Testing
coverage/

# Database files
*.db
*.db-journal

# OS
.DS_Store
Thumbs.db

================
File: .prettierignore
================
# Package Managers
package-lock.json
pnpm-lock.yaml
yarn.lock

================
File: .prettierrc
================
{
	"useTabs": true,
	"singleQuote": true,
	"trailingComma": "all",
	"printWidth": 70,
	"proseWrap": "always"
}

================
File: CHANGELOG.md
================
# mcp-jinaai-reader

## 0.0.2

### Patch Changes

- add glama badge

## 0.0.1

### Patch Changes

- init

## 0.0.4

### Patch Changes

- fix: update README.md for mcp-jinaai-reader configuration

## 0.0.3

### Patch Changes

- add glama banner

## 0.0.2

### Patch Changes

- update for publish to npm

================
File: LICENSE
================
MIT License

Copyright (c) 2025 Scott Spence

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

================
File: package.json
================
{
	"name": "mcp-jinaai-search",
	"version": "0.0.2",
	"description": "MCP server for JinaAI search",
	"type": "module",
	"main": "dist/index.js",
	"types": "dist/index.d.ts",
	"bin": {
		"mcp-jinaai-search": "./dist/index.js"
	},
	"files": [
		"dist",
		"README.md",
		"LICENSE"
	],
	"scripts": {
		"build": "tsc && chmod +x dist/index.js",
		"start": "node dist/index.js",
		"dev": "npx @modelcontextprotocol/inspector dist/index.js",
		"changeset": "changeset",
		"version": "changeset version",
		"release": "pnpm run build && changeset publish"
	},
	"keywords": [
		"mcp",
		"model-context-protocol",
		"jinaai",
		"search",
		"web-content",
		"documentation",
		"content-extraction",
		"text-extraction",
		"llm",
		"ai",
		"web-scraping",
		"content-parser"
	],
	"author": "Scott Spence",
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/spences10/mcp-jinaai-search.git"
	},
	"bugs": {
		"url": "https://github.com/spences10/mcp-jinaai-search/issues"
	},
	"homepage": "https://github.com/spences10/mcp-jinaai-search#readme",
	"dependencies": {
		"@modelcontextprotocol/sdk": "1.5.0"
	},
	"devDependencies": {
		"@changesets/cli": "^2.27.12",
		"@types/node": "^22.13.0",
		"typescript": "^5.7.3"
	}
}

================
File: README.md
================
# mcp-jinaai-search

A Model Context Protocol (MCP) server for integrating Jina.ai's Search
API with LLMs. This server provides efficient and comprehensive web
search capabilities, optimised for retrieving clean, LLM-friendly
content from the web.

<a href="https://glama.ai/mcp/servers/u6603w196t">
  <img width="380" height="200" src="https://glama.ai/mcp/servers/u6603w196t/badge" />
</a>

## Features

- 🔍 Advanced web search through Jina.ai Search API
- 🚀 Fast and efficient content retrieval
- 📄 Clean text extraction with preserved structure
- 🧠 Content optimised for LLMs
- 🌐 Support for various content types including documentation
- 🏗️ Built on the Model Context Protocol
- 🔄 Configurable caching for performance
- 🖼️ Optional image and link gathering
- 🌍 Localisation support through browser locale
- 🎯 Token budget control for response size

## Configuration

This server requires configuration through your MCP client. Here are
examples for different environments:

### Cline Configuration

Add this to your Cline MCP settings:

```json
{
	"mcpServers": {
		"jinaai-search": {
			"command": "node",
			"args": ["-y", "mcp-jinaai-search"],
			"env": {
				"JINAAI_API_KEY": "your-jinaai-api-key"
			}
		}
	}
}
```

### Claude Desktop with WSL Configuration

For WSL environments, add this to your Claude Desktop configuration:

```json
{
	"mcpServers": {
		"jinaai-search": {
			"command": "wsl.exe",
			"args": [
				"bash",
				"-c",
				"JINAAI_API_KEY=your-jinaai-api-key npx mcp-jinaai-search"
			]
		}
	}
}
```

### Environment Variables

The server requires the following environment variable:

- `JINAAI_API_KEY`: Your Jina.ai API key (required)

## API

The server implements a single MCP tool with configurable parameters:

### search

Search the web and get clean, LLM-friendly content using Jina.ai
Reader. Returns top 5 results with URLs and clean content.

Parameters:

- `query` (string, required): Search query
- `format` (string, optional): Response format ("json" or "text").
  Defaults to "text"
- `no_cache` (boolean, optional): Bypass cache for fresh results.
  Defaults to false
- `token_budget` (number, optional): Maximum number of tokens for this
  request
- `browser_locale` (string, optional): Browser locale for rendering
  content
- `stream` (boolean, optional): Enable stream mode for large pages.
  Defaults to false
- `gather_links` (boolean, optional): Gather all links at the end of
  response. Defaults to false
- `gather_images` (boolean, optional): Gather all images at the end of
  response. Defaults to false
- `image_caption` (boolean, optional): Caption images in the content.
  Defaults to false
- `enable_iframe` (boolean, optional): Extract content from iframes.
  Defaults to false
- `enable_shadow_dom` (boolean, optional): Extract content from shadow
  DOM. Defaults to false
- `resolve_redirects` (boolean, optional): Follow redirect chains to
  final URL. Defaults to true

## Development

### Setup

1. Clone the repository
2. Install dependencies:

```bash
pnpm install
```

3. Build the project:

```bash
pnpm run build
```

4. Run in development mode:

```bash
pnpm run dev
```

### Publishing

1. Create a changeset:

```bash
pnpm changeset
```

2. Version the package:

```bash
pnpm version
```

3. Build and publish:

```bash
pnpm release
```

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- Built on the
  [Model Context Protocol](https://github.com/modelcontextprotocol)
- Powered by [Jina.ai Search API](https://jina.ai)

================
File: renovate.json
================
{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:recommended"
  ]
}

================
File: tsconfig.json
================
{
	"compilerOptions": {
		"target": "ES2020",
		"module": "ES2020",
		"moduleResolution": "node",
		"esModuleInterop": true,
		"strict": true,
		"outDir": "dist",
		"rootDir": "src",
		"skipLibCheck": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true
	},
	"include": ["src/**/*"],
	"exclude": ["node_modules", "dist"]
}



================================================================
End of Codebase
================================================================
